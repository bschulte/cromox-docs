(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{hdxr:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return b}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var i=n("/FXl"),a=n("TjRS");n("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"lists.mdx"}});var r={_frontmatter:l},s=a.a;function b(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["components"]);return Object(i.b)(s,o({},r,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"lists"},"Lists"),Object(i.b)("p",null,"Lists are the main buildling block of Cromox. They are how you define the data types that the server will be working with."),Object(i.b)("p",null,"Once you have an app created, you can begin creating lists for it. Lists have to have a name (starting with a capital letter) and a set of options."),Object(i.b)("h2",{id:"options"},"Options"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"fields")),Object(i.b)("p",null,"An array of fields that represent this list."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"hooks")),Object(i.b)("p",null,"Lifecycle functions to hook into different points of data manipulation."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"access")),Object(i.b)("p",null,"Functions to control access to data."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"timestamps")),Object(i.b)("p",null,"Specifies whether or not to have the database connector create 'createdAt' and 'updatedAt' fields for the list."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"pagination")),Object(i.b)("p",null,"Dictates whether a pagination query is setup for the list"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"hasOwner")),Object(i.b)("p",null,"Convenient boolean to specify whether data in this list should have an owner (a user id). If so, it will limit writes/reads\non this list to site admins or the data's owner."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"isSubList")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"}," ONLY USED FOR MONGODB CONNECTIONS ")),Object(i.b)("p",null,"Specifies if this list is a sub-list to another list. This will create this list as a sub document to whatever other list references\nit in a relationship."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"changeValidationErrorMsg")),Object(i.b)("p",null,"Validation message to be displayed with an error during input validation"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"deleteValidationErrorMsg")),Object(i.b)("p",null,"Validation message to be displayed with an error during delete validation"))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"lists.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---lists-mdx-e450d36ee6207edb25bf.js.map