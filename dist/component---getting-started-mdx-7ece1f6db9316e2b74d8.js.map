{"version":3,"sources":["webpack:///../getting-started.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,6LAEA,kFACA,gJACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,2HAOL,iIACA,kGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+NAeL,kJACA,iBAAQ,CACN,GAAM,0BADR,0BAGA,8HAA6G,0BAAYA,WAAW,KAAvB,eAA7G,6CAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iZAsBL,4BAAW,0BAAYA,WAAW,KAAvB,aAAX,mBAAoF,0BAAYA,WAAW,KAAvB,SAApF,iEACA,iBAAQ,CACN,GAAM,yBADR,yBAGA,0IACA,qFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0iBA+BL,2JACA,kS,mMAMJJ,EAAWK,gBAAiB","file":"component---getting-started-mdx-7ece1f6db9316e2b74d8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bschulte/webdev/zephyr-cloud-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting Started`}</h1>\n    <p>{`Getting started with Zephyr Cloud takes only a few steps to get working with multiple\ntypes of data with a whole suite of supporting infrastructure surrounding it.`}</p>\n    <p>{`First, you need to instantiate the main cloud app object:`}</p>\n    <p>{`The heart of lists are the fields that represent the data in the list. See the list documentation for more information.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const zCloud = new ZephyrCloud({\n  dbString: \"mongodb://localhost:27017/zephyr\",\n  authStrategies: [\"local\"],\n});\n`}</code></pre>\n    <p>{`The only required parameter you need to pass is the database string to connect to your MongoDB database.`}</p>\n    <p>{`After you this is done, you can begin adding on lists to the application.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`zCloud.createList(\"Thing\", {\n  fields: {\n    name: {\n      description: \"Name of the best thing ever\",\n      fieldType: Text,\n      unique: true,\n    },\n    count: {\n      fieldType: Float,\n    },\n  },\n});\n`}</code></pre>\n    <p>{`The heart of lists are the fields that represent the data in the list. See the Fields documentation for more information.`}</p>\n    <h2 {...{\n      \"id\": \"adding-lifecycle-hooks\"\n    }}>{`Adding Lifecycle Hooks`}</h2>\n    <p>{`For each list we can hook into various parts of data reading/manipulation. Let's say we want to add a `}<inlineCode parentName=\"p\">{`console.log`}</inlineCode>{` statement\nbefore a document is created.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`zCloud.createList(\"Thing\", {\n  fields: {\n    name: {\n      description: \"Name of the best thing ever\",\n      fieldType: Text,\n      unique: true,\n    },\n    count: {\n      fieldType: Float,\n    },\n  },\n  hooks: {\n    preChange: async ({ list, args, isNew }) => {\n      if (isNew) {\n        console.log(\"Pre create for list:\", list.name, \"Args:\", args);\n      }\n    },\n  },\n});\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`preChange`}</inlineCode>{` hook passes in `}<inlineCode parentName=\"p\">{`isNew`}</inlineCode>{` which will represent if the operation is a create or update.`}</p>\n    <h2 {...{\n      \"id\": \"adding-access-control\"\n    }}>{`Adding Access Control`}</h2>\n    <p>{`Along with lifecycle hooks, we can define access controls for the operations or create, read, update, and delete.`}</p>\n    <p>{`Say we want to only allow deletion for users who are admins:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`zCloud.createList(\"Thing\", {\n  fields: {\n    name: {\n      description: \"Name of the best thing ever\",\n      fieldType: Text,\n      unique: true,\n    },\n    count: {\n      fieldType: Float,\n    },\n  },\n  hooks: {\n    preChange: async ({ list, args, isNew }) => {\n      if (isNew) {\n        console.log(\"Pre create for list:\", list.name, \"Args:\", args);\n      }\n    },\n  },\n  access: {\n    delete: async ({ user }) => {\n      if (!user || !user.isAdmin) {\n        return false;\n      }\n\n      return true;\n    },\n  },\n});\n`}</code></pre>\n    <p>{`The access functions provide the currently authenticated user as well as the document(s) that are being affected by the operation.`}</p>\n    <p>{`Access control configs can also be provided an array of authorized roles (strings) to perform the action. In this case, a check is made\nto see if the currently authenticated user has any of the provided roles. If not, the operation isn't allowed to continue.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}