{"version":3,"sources":["webpack:///../lists.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,2LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,SADR,SAGA,mJACA,4KACA,iBAAQ,CACN,GAAM,WADR,WAGA,qBAAG,0BAAYC,WAAW,KAAvB,WACH,qEACA,qBAAG,0BAAYA,WAAW,KAAvB,UACH,gGACA,qBAAG,0BAAYA,WAAW,KAAvB,WACH,6DACA,qBAAG,0BAAYA,WAAW,KAAvB,eACH,wIACA,qBAAG,0BAAYA,WAAW,KAAvB,eACH,kFACA,qBAAG,0BAAYA,WAAW,KAAvB,aACH,sMAEA,qBAAG,0BAAYA,WAAW,KAAvB,cACH,qBAAG,sBAAQA,WAAW,KAAnB,wCACH,oLAEA,qBAAG,0BAAYA,WAAW,KAAvB,6BACH,iGACA,qBAAG,0BAAYA,WAAW,KAAvB,6BACH,wG,yLAKJJ,EAAWK,gBAAiB","file":"component---lists-mdx-e450d36ee6207edb25bf.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/bschulte/webdev/cromox-docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lists\"\n    }}>{`Lists`}</h1>\n    <p>{`Lists are the main buildling block of Cromox. They are how you define the data types that the server will be working with.`}</p>\n    <p>{`Once you have an app created, you can begin creating lists for it. Lists have to have a name (starting with a capital letter) and a set of options.`}</p>\n    <h2 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h2>\n    <p><inlineCode parentName=\"p\">{`fields`}</inlineCode></p>\n    <p>{`An array of fields that represent this list.`}</p>\n    <p><inlineCode parentName=\"p\">{`hooks`}</inlineCode></p>\n    <p>{`Lifecycle functions to hook into different points of data manipulation.`}</p>\n    <p><inlineCode parentName=\"p\">{`access`}</inlineCode></p>\n    <p>{`Functions to control access to data.`}</p>\n    <p><inlineCode parentName=\"p\">{`timestamps`}</inlineCode></p>\n    <p>{`Specifies whether or not to have the database connector create 'createdAt' and 'updatedAt' fields for the list.`}</p>\n    <p><inlineCode parentName=\"p\">{`pagination`}</inlineCode></p>\n    <p>{`Dictates whether a pagination query is setup for the list`}</p>\n    <p><inlineCode parentName=\"p\">{`hasOwner`}</inlineCode></p>\n    <p>{`Convenient boolean to specify whether data in this list should have an owner (a user id). If so, it will limit writes/reads\non this list to site admins or the data's owner.`}</p>\n    <p><inlineCode parentName=\"p\">{`isSubList`}</inlineCode></p>\n    <p><strong parentName=\"p\">{` ONLY USED FOR MONGODB CONNECTIONS `}</strong></p>\n    <p>{`Specifies if this list is a sub-list to another list. This will create this list as a sub document to whatever other list references\nit in a relationship.`}</p>\n    <p><inlineCode parentName=\"p\">{`changeValidationErrorMsg`}</inlineCode></p>\n    <p>{`Validation message to be displayed with an error during input validation`}</p>\n    <p><inlineCode parentName=\"p\">{`deleteValidationErrorMsg`}</inlineCode></p>\n    <p>{`Validation message to be displayed with an error during delete validation`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}