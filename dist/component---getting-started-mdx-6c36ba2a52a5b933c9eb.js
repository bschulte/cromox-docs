(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{u8Gs:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),o=n("TjRS");n("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"getting-started.mdx"}});var s={_frontmatter:i},l=o.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(l,r({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"getting-started"},"Getting Started"),Object(a.b)("p",null,"Getting started with Cromox takes only a few steps to get working with multiple\ntypes of data with a whole suite of supporting infrastructure surrounding it."),Object(a.b)("p",null,"First, you need to instantiate the main cloud app object:"),Object(a.b)("p",null,"The heart of lists are the fields that represent the data in the list. See the list documentation for more information."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),'const zCloud = new Cromox({\n  dbString: "mongodb://localhost:27017/cromox",\n  authStrategies: ["local"],\n});\n')),Object(a.b)("p",null,"The only required parameter you need to pass is the database string to connect to your MongoDB database."),Object(a.b)("p",null,"After you this is done, you can begin adding on lists to the application."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),'zCloud.createList("Thing", {\n  fields: {\n    name: {\n      description: "Name of the best thing ever",\n      fieldType: Text,\n      unique: true,\n    },\n    count: {\n      fieldType: Float,\n    },\n  },\n});\n')),Object(a.b)("p",null,"The heart of lists are the fields that represent the data in the list. See the Fields documentation for more information."),Object(a.b)("h2",{id:"adding-lifecycle-hooks"},"Adding Lifecycle Hooks"),Object(a.b)("p",null,"For each list we can hook into various parts of data reading/manipulation. Let's say we want to add a ",Object(a.b)("inlineCode",{parentName:"p"},"console.log")," statement\nbefore a document is created."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),'zCloud.createList("Thing", {\n  fields: {\n    name: {\n      description: "Name of the best thing ever",\n      fieldType: Text,\n      unique: true,\n    },\n    count: {\n      fieldType: Float,\n    },\n  },\n  hooks: {\n    preChange: async ({ list, args, isNew }) => {\n      if (isNew) {\n        console.log("Pre create for list:", list.name, "Args:", args);\n      }\n    },\n  },\n});\n')),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"preChange")," hook passes in ",Object(a.b)("inlineCode",{parentName:"p"},"isNew")," which will represent if the operation is a create or update."),Object(a.b)("h2",{id:"adding-access-control"},"Adding Access Control"),Object(a.b)("p",null,"Along with lifecycle hooks, we can define access controls for the operations or create, read, update, and delete."),Object(a.b)("p",null,"Say we want to only allow deletion for users who are admins:"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-javascript"}),'zCloud.createList("Thing", {\n  fields: {\n    name: {\n      description: "Name of the best thing ever",\n      fieldType: Text,\n      unique: true,\n    },\n    count: {\n      fieldType: Float,\n    },\n  },\n  hooks: {\n    preChange: async ({ list, args, isNew }) => {\n      if (isNew) {\n        console.log("Pre create for list:", list.name, "Args:", args);\n      }\n    },\n  },\n  access: {\n    delete: async ({ user }) => {\n      if (!user || !user.isAdmin) {\n        return false;\n      }\n\n      return true;\n    },\n  },\n});\n')),Object(a.b)("p",null,"The access functions provide the currently authenticated user as well as the document(s) that are being affected by the operation."),Object(a.b)("p",null,"Access control configs can also be provided an array of authorized roles (strings) to perform the action. In this case, a check is made\nto see if the currently authenticated user has any of the provided roles. If not, the operation isn't allowed to continue."))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"getting-started.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---getting-started-mdx-6c36ba2a52a5b933c9eb.js.map